# Logging
logging.level.root=INFO

# Hibernate Properties
spring.jpa.hibernate.ddl-auto=none

# JPA Properties
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Actuator
management.endpoints.web.exposure.include=*
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always

#####
##### Circuit Breaker - Resilience4j
#####

# To see different states of circuit breaker: Closed, Open, Half-Open
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

# How much buffer size it is going to take for the events
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

# Make sure that r4j won't open circuit breaker right away
# If r4j understands that a call to the inv service is failing
# It won't change state from close to open right away
# It will w8 for some number of reqs
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

# After X below rew circuit breaker will try to change from close to the open state
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

# When the 50% of calls are like failed...
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

# Then we define how much time we can wait in the open state
# Before going to half open state we don't want to allow all the calls to execute the fallback logic
# R4j w8 5 sec in the open state before changing to the half open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

# After x calls r4j check whether the communication between services is working fine or not
# When 3 calls are failing it will change the status to open
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

# We want to automatically transition like enable transition between open to half open
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Eureka Client cfg
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Server
server.port=0